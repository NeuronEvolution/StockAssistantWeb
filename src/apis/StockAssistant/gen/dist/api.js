"use strict";
/**
 * Stock Assistant
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");
var BASE_PATH = "https://localhost/api/stock-assistant/v1".replace(/\/+$/, "");
var BaseAPI = /** @class */ (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
/**
 * DefaultApi - fetch parameter creator
 */
exports.DefaultApiFetchParamCreator = {
    /**
     *
     * @summary get stock
     * @param stockId
     */
    stockGet: function (params, options) {
        // verify required parameter "stockId" is set
        if (params["stockId"] == null) {
            throw new Error("Missing required parameter stockId when calling stockGet");
        }
        var baseUrl = "/stocks/{stockId}"
            .replace("{" + "stockId" + "}", "" + params["stockId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary list
     * @param userId
     * @param pageToken
     * @param pageSize
     */
    stockIndexAdviceList: function (params, options) {
        var baseUrl = "/stockIndexAdvices";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "userId": params["userId"],
            "pageToken": params["pageToken"],
            "pageSize": params["pageSize"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param stockId stock id
     * @param indexName index name
     */
    userIndexEvaluateGet: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userIndexEvaluateGet");
        }
        // verify required parameter "stockId" is set
        if (params["stockId"] == null) {
            throw new Error("Missing required parameter stockId when calling userIndexEvaluateGet");
        }
        // verify required parameter "indexName" is set
        if (params["indexName"] == null) {
            throw new Error("Missing required parameter indexName when calling userIndexEvaluateGet");
        }
        var baseUrl = "/{userId}/stockEvaluates/{stockId}/indexEvaluates/{indexName}"
            .replace("{" + "userId" + "}", "" + params["userId"])
            .replace("{" + "stockId" + "}", "" + params["stockId"])
            .replace("{" + "indexName" + "}", "" + params["indexName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param stockId stock id
     */
    userIndexEvaluateList: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userIndexEvaluateList");
        }
        // verify required parameter "stockId" is set
        if (params["stockId"] == null) {
            throw new Error("Missing required parameter stockId when calling userIndexEvaluateList");
        }
        var baseUrl = "/{userId}/stockEvaluates/{stockId}/indexEvaluates"
            .replace("{" + "userId" + "}", "" + params["userId"])
            .replace("{" + "stockId" + "}", "" + params["stockId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param stockId stock id
     * @param indexEvaluate
     */
    userIndexEvaluateSave: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userIndexEvaluateSave");
        }
        // verify required parameter "stockId" is set
        if (params["stockId"] == null) {
            throw new Error("Missing required parameter stockId when calling userIndexEvaluateSave");
        }
        // verify required parameter "indexEvaluate" is set
        if (params["indexEvaluate"] == null) {
            throw new Error("Missing required parameter indexEvaluate when calling userIndexEvaluateSave");
        }
        var baseUrl = "/{userId}/stockEvaluates/{stockId}/indexEvaluates"
            .replace("{" + "userId" + "}", "" + params["userId"])
            .replace("{" + "stockId" + "}", "" + params["stockId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["indexEvaluate"]) {
            fetchOptions.body = JSON.stringify(params["indexEvaluate"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param configKey config key
     */
    userSettingDelete: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userSettingDelete");
        }
        // verify required parameter "configKey" is set
        if (params["configKey"] == null) {
            throw new Error("Missing required parameter configKey when calling userSettingDelete");
        }
        var baseUrl = "/{userId}/settings/{configKey}"
            .replace("{" + "userId" + "}", "" + params["userId"])
            .replace("{" + "configKey" + "}", "" + params["configKey"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param configKey config key
     */
    userSettingGet: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userSettingGet");
        }
        // verify required parameter "configKey" is set
        if (params["configKey"] == null) {
            throw new Error("Missing required parameter configKey when calling userSettingGet");
        }
        var baseUrl = "/{userId}/settings/{configKey}"
            .replace("{" + "userId" + "}", "" + params["userId"])
            .replace("{" + "configKey" + "}", "" + params["configKey"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary list
     * @param userId User id
     */
    userSettingList: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userSettingList");
        }
        var baseUrl = "/{userId}/settings"
            .replace("{" + "userId" + "}", "" + params["userId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary save
     * @param userId User id
     * @param setting setting
     */
    userSettingSave: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userSettingSave");
        }
        // verify required parameter "setting" is set
        if (params["setting"] == null) {
            throw new Error("Missing required parameter setting when calling userSettingSave");
        }
        var baseUrl = "/{userId}/settings"
            .replace("{" + "userId" + "}", "" + params["userId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["setting"]) {
            fetchOptions.body = JSON.stringify(params["setting"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param stockId stock id
     */
    userStockEvaluateGet: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userStockEvaluateGet");
        }
        // verify required parameter "stockId" is set
        if (params["stockId"] == null) {
            throw new Error("Missing required parameter stockId when calling userStockEvaluateGet");
        }
        var baseUrl = "/{userId}/stockEvaluates/{stockId}"
            .replace("{" + "userId" + "}", "" + params["userId"])
            .replace("{" + "stockId" + "}", "" + params["stockId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param pageToken page token
     * @param pageSize page size
     * @param sort sort
     * @param notEvaluated not evaluated
     */
    userStockEvaluateList: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userStockEvaluateList");
        }
        var baseUrl = "/{userId}/stockEvaluates"
            .replace("{" + "userId" + "}", "" + params["userId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "pageToken": params["pageToken"],
            "pageSize": params["pageSize"],
            "sort": params["sort"],
            "notEvaluated": params["notEvaluated"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary add
     * @param userId User id
     * @param index Index
     */
    userStockIndexAdd: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userStockIndexAdd");
        }
        // verify required parameter "index" is set
        if (params["index"] == null) {
            throw new Error("Missing required parameter index when calling userStockIndexAdd");
        }
        var baseUrl = "/{userId}/stockIndices"
            .replace("{" + "userId" + "}", "" + params["userId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["index"]) {
            fetchOptions.body = JSON.stringify(params["index"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param indexName index id
     */
    userStockIndexDelete: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userStockIndexDelete");
        }
        // verify required parameter "indexName" is set
        if (params["indexName"] == null) {
            throw new Error("Missing required parameter indexName when calling userStockIndexDelete");
        }
        var baseUrl = "/{userId}/stockIndices/{indexName}"
            .replace("{" + "userId" + "}", "" + params["userId"])
            .replace("{" + "indexName" + "}", "" + params["indexName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Get user index
     * @param userId User id
     * @param indexName index id
     */
    userStockIndexGet: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userStockIndexGet");
        }
        // verify required parameter "indexName" is set
        if (params["indexName"] == null) {
            throw new Error("Missing required parameter indexName when calling userStockIndexGet");
        }
        var baseUrl = "/{userId}/stockIndices/{indexName}"
            .replace("{" + "userId" + "}", "" + params["userId"])
            .replace("{" + "indexName" + "}", "" + params["indexName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary Get user indices
     * @param userId User id
     */
    userStockIndexList: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userStockIndexList");
        }
        var baseUrl = "/{userId}/stockIndices"
            .replace("{" + "userId" + "}", "" + params["userId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param nameOld old name
     * @param nameNew new name
     */
    userStockIndexRename: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userStockIndexRename");
        }
        // verify required parameter "nameOld" is set
        if (params["nameOld"] == null) {
            throw new Error("Missing required parameter nameOld when calling userStockIndexRename");
        }
        // verify required parameter "nameNew" is set
        if (params["nameNew"] == null) {
            throw new Error("Missing required parameter nameNew when calling userStockIndexRename");
        }
        var baseUrl = "/{userId}/stockIndices/rename"
            .replace("{" + "userId" + "}", "" + params["userId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "nameOld": params["nameOld"],
            "nameNew": params["nameNew"],
        });
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     *
     * @summary update
     * @param userId User id
     * @param indexName index id
     * @param index Index
     */
    userStockIndexUpdate: function (params, options) {
        // verify required parameter "userId" is set
        if (params["userId"] == null) {
            throw new Error("Missing required parameter userId when calling userStockIndexUpdate");
        }
        // verify required parameter "indexName" is set
        if (params["indexName"] == null) {
            throw new Error("Missing required parameter indexName when calling userStockIndexUpdate");
        }
        // verify required parameter "index" is set
        if (params["index"] == null) {
            throw new Error("Missing required parameter index when calling userStockIndexUpdate");
        }
        var baseUrl = "/{userId}/stockIndices/{indexName}"
            .replace("{" + "userId" + "}", "" + params["userId"])
            .replace("{" + "indexName" + "}", "" + params["indexName"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["index"]) {
            fetchOptions.body = JSON.stringify(params["index"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * DefaultApi - functional programming interface
 */
exports.DefaultApiFp = {
    /**
     *
     * @summary get stock
     * @param stockId
     */
    stockGet: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.stockGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary list
     * @param userId
     * @param pageToken
     * @param pageSize
     */
    stockIndexAdviceList: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.stockIndexAdviceList(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param stockId stock id
     * @param indexName index name
     */
    userIndexEvaluateGet: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.userIndexEvaluateGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param stockId stock id
     */
    userIndexEvaluateList: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.userIndexEvaluateList(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param stockId stock id
     * @param indexEvaluate
     */
    userIndexEvaluateSave: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.userIndexEvaluateSave(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param configKey config key
     */
    userSettingDelete: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.userSettingDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param configKey config key
     */
    userSettingGet: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.userSettingGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary list
     * @param userId User id
     */
    userSettingList: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.userSettingList(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary save
     * @param userId User id
     * @param setting setting
     */
    userSettingSave: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.userSettingSave(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param stockId stock id
     */
    userStockEvaluateGet: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.userStockEvaluateGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param pageToken page token
     * @param pageSize page size
     * @param sort sort
     * @param notEvaluated not evaluated
     */
    userStockEvaluateList: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.userStockEvaluateList(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary add
     * @param userId User id
     * @param index Index
     */
    userStockIndexAdd: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.userStockIndexAdd(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param indexName index id
     */
    userStockIndexDelete: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.userStockIndexDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Get user index
     * @param userId User id
     * @param indexName index id
     */
    userStockIndexGet: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.userStockIndexGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary Get user indices
     * @param userId User id
     */
    userStockIndexList: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.userStockIndexList(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary
     * @param userId User id
     * @param nameOld old name
     * @param nameNew new name
     */
    userStockIndexRename: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.userStockIndexRename(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     *
     * @summary update
     * @param userId User id
     * @param indexName index id
     * @param index Index
     */
    userStockIndexUpdate: function (params, options) {
        var fetchArgs = exports.DefaultApiFetchParamCreator.userStockIndexUpdate(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * DefaultApi - object-oriented interface
 */
var DefaultApi = /** @class */ (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary get stock
     * @param stockId
     */
    DefaultApi.prototype.stockGet = function (params, options) {
        return exports.DefaultApiFp.stockGet(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary list
     * @param userId
     * @param pageToken
     * @param pageSize
     */
    DefaultApi.prototype.stockIndexAdviceList = function (params, options) {
        return exports.DefaultApiFp.stockIndexAdviceList(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary
     * @param userId User id
     * @param stockId stock id
     * @param indexName index name
     */
    DefaultApi.prototype.userIndexEvaluateGet = function (params, options) {
        return exports.DefaultApiFp.userIndexEvaluateGet(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary
     * @param userId User id
     * @param stockId stock id
     */
    DefaultApi.prototype.userIndexEvaluateList = function (params, options) {
        return exports.DefaultApiFp.userIndexEvaluateList(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary
     * @param userId User id
     * @param stockId stock id
     * @param indexEvaluate
     */
    DefaultApi.prototype.userIndexEvaluateSave = function (params, options) {
        return exports.DefaultApiFp.userIndexEvaluateSave(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary
     * @param userId User id
     * @param configKey config key
     */
    DefaultApi.prototype.userSettingDelete = function (params, options) {
        return exports.DefaultApiFp.userSettingDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary
     * @param userId User id
     * @param configKey config key
     */
    DefaultApi.prototype.userSettingGet = function (params, options) {
        return exports.DefaultApiFp.userSettingGet(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary list
     * @param userId User id
     */
    DefaultApi.prototype.userSettingList = function (params, options) {
        return exports.DefaultApiFp.userSettingList(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary save
     * @param userId User id
     * @param setting setting
     */
    DefaultApi.prototype.userSettingSave = function (params, options) {
        return exports.DefaultApiFp.userSettingSave(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary
     * @param userId User id
     * @param stockId stock id
     */
    DefaultApi.prototype.userStockEvaluateGet = function (params, options) {
        return exports.DefaultApiFp.userStockEvaluateGet(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary
     * @param userId User id
     * @param pageToken page token
     * @param pageSize page size
     * @param sort sort
     * @param notEvaluated not evaluated
     */
    DefaultApi.prototype.userStockEvaluateList = function (params, options) {
        return exports.DefaultApiFp.userStockEvaluateList(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary add
     * @param userId User id
     * @param index Index
     */
    DefaultApi.prototype.userStockIndexAdd = function (params, options) {
        return exports.DefaultApiFp.userStockIndexAdd(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary
     * @param userId User id
     * @param indexName index id
     */
    DefaultApi.prototype.userStockIndexDelete = function (params, options) {
        return exports.DefaultApiFp.userStockIndexDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get user index
     * @param userId User id
     * @param indexName index id
     */
    DefaultApi.prototype.userStockIndexGet = function (params, options) {
        return exports.DefaultApiFp.userStockIndexGet(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary Get user indices
     * @param userId User id
     */
    DefaultApi.prototype.userStockIndexList = function (params, options) {
        return exports.DefaultApiFp.userStockIndexList(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary
     * @param userId User id
     * @param nameOld old name
     * @param nameNew new name
     */
    DefaultApi.prototype.userStockIndexRename = function (params, options) {
        return exports.DefaultApiFp.userStockIndexRename(params, options)(this.fetch, this.basePath);
    };
    /**
     *
     * @summary update
     * @param userId User id
     * @param indexName index id
     * @param index Index
     */
    DefaultApi.prototype.userStockIndexUpdate = function (params, options) {
        return exports.DefaultApiFp.userStockIndexUpdate(params, options)(this.fetch, this.basePath);
    };
    return DefaultApi;
}(BaseAPI));
exports.DefaultApi = DefaultApi;
/**
 * DefaultApi - factory interface
 */
exports.DefaultApiFactory = function (fetch, basePath) {
    return {
        /**
         *
         * @summary get stock
         * @param stockId
         */
        stockGet: function (params, options) {
            return exports.DefaultApiFp.stockGet(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary list
         * @param userId
         * @param pageToken
         * @param pageSize
         */
        stockIndexAdviceList: function (params, options) {
            return exports.DefaultApiFp.stockIndexAdviceList(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary
         * @param userId User id
         * @param stockId stock id
         * @param indexName index name
         */
        userIndexEvaluateGet: function (params, options) {
            return exports.DefaultApiFp.userIndexEvaluateGet(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary
         * @param userId User id
         * @param stockId stock id
         */
        userIndexEvaluateList: function (params, options) {
            return exports.DefaultApiFp.userIndexEvaluateList(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary
         * @param userId User id
         * @param stockId stock id
         * @param indexEvaluate
         */
        userIndexEvaluateSave: function (params, options) {
            return exports.DefaultApiFp.userIndexEvaluateSave(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary
         * @param userId User id
         * @param configKey config key
         */
        userSettingDelete: function (params, options) {
            return exports.DefaultApiFp.userSettingDelete(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary
         * @param userId User id
         * @param configKey config key
         */
        userSettingGet: function (params, options) {
            return exports.DefaultApiFp.userSettingGet(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary list
         * @param userId User id
         */
        userSettingList: function (params, options) {
            return exports.DefaultApiFp.userSettingList(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary save
         * @param userId User id
         * @param setting setting
         */
        userSettingSave: function (params, options) {
            return exports.DefaultApiFp.userSettingSave(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary
         * @param userId User id
         * @param stockId stock id
         */
        userStockEvaluateGet: function (params, options) {
            return exports.DefaultApiFp.userStockEvaluateGet(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary
         * @param userId User id
         * @param pageToken page token
         * @param pageSize page size
         * @param sort sort
         * @param notEvaluated not evaluated
         */
        userStockEvaluateList: function (params, options) {
            return exports.DefaultApiFp.userStockEvaluateList(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary add
         * @param userId User id
         * @param index Index
         */
        userStockIndexAdd: function (params, options) {
            return exports.DefaultApiFp.userStockIndexAdd(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary
         * @param userId User id
         * @param indexName index id
         */
        userStockIndexDelete: function (params, options) {
            return exports.DefaultApiFp.userStockIndexDelete(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get user index
         * @param userId User id
         * @param indexName index id
         */
        userStockIndexGet: function (params, options) {
            return exports.DefaultApiFp.userStockIndexGet(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get user indices
         * @param userId User id
         */
        userStockIndexList: function (params, options) {
            return exports.DefaultApiFp.userStockIndexList(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary
         * @param userId User id
         * @param nameOld old name
         * @param nameNew new name
         */
        userStockIndexRename: function (params, options) {
            return exports.DefaultApiFp.userStockIndexRename(params, options)(fetch, basePath);
        },
        /**
         *
         * @summary update
         * @param userId User id
         * @param indexName index id
         * @param index Index
         */
        userStockIndexUpdate: function (params, options) {
            return exports.DefaultApiFp.userStockIndexUpdate(params, options)(fetch, basePath);
        },
    };
};
